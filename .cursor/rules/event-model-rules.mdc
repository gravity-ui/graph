---
description: Rules and best practices for working with the event model in @gravity-ui/graph (Based on docs/system/events.md and docs/react/usage.md)
globs: 
alwaysApply: false
---

## Event System Overview
The event system allows communication between different parts of the graph.
The primary event hub is the main **`Graph` instance**. Events related to specific components (like blocks or connections) are also typically emitted by the main `Graph` instance, carrying information about the target component in the event detail.

The system uses **`CustomEvent`**, and interaction follows a `.on`/`.off`/`.emit` pattern on the `Graph` instance.

## Key Concepts
- **Event Emitter:** The main `Graph` instance is the primary emitter.
- **Event Object:** Instances of `CustomEvent`. Data is in **`event.detail`**.
- **Target Component:** For interaction events (e.g., `block:select`, `click`), `event.detail.target` often references the specific `GraphComponent` interacted with.
- **Source Event:** `event.detail.sourceEvent` may contain the original low-level DOM/Canvas event.
- **Event Types:** String names. See `docs/system/events.md` for a list.
- **Subscription API (Core):** Uses **`graph.on(event, callback, options)`**.
- **Unsubscription API (Core):** Uses **`graph.off(event, callback)`**. **Crucial for cleanup.**
- **Control Flow:** Standard `event.preventDefault()` and `event.stopPropagation()` can be used on the `CustomEvent` object.

## Working with Events

### 1. Subscribing to Graph Events (Core API)
   - **How:** Use the main `Graph` instance.
   - **API:** `graph.on(eventName, callback, options)`.
   - **Context:** Access the graph instance via `this.context.graph` in non-React components.
   - **Use Case:** Reacting to global changes or interactions outside of React components. Remember to manage unsubscription manually (e.g., in `unmount`).
   ```typescript
   // Example: Global camera update listener in a non-React component
   const unsubscribeCamera = this.context.graph.on('camera:update', (event: CustomEvent</* TCameraState */>) => {
     const cameraState = event.detail;
     console.log('Camera moved:', cameraState);
   });
   // In unmount(): if (unsubscribeCamera) unsubscribeCamera();
   ```

### 2. Handling Events in React (`<GraphCanvas>` wrapper)
   - **Obtaining the Graph Instance:** Within React components, the `Graph` instance needed for event handling (especially with `useGraphEvent`) is typically obtained using the **`useGraph()`** hook: `const { graph } = useGraph(config);`.
   - **Method A (Recommended): `useGraphEvent` Hook:** The primary way to listen to graph events within React function components.
     - **Requires:** The `graph` instance obtained from `useGraph()`.
     - **Pros:** Automatically handles subscription/unsubscription; provides `detail` and `event` objects.
     - **Cons:** Only usable within React function components.
     ```jsx
     import { useGraph, useGraphEvent, GraphCanvas } from '@gravity-ui/graph';

     function MyReactComponent() {
       const { graph } = useGraph(/* config */);

       useGraphEvent(graph, 'block:select', (detail, event) => {
         console.log('React Hook: Block selected:', detail.target?.id);
       });

       // ... other useGraphEvent calls

       return <GraphCanvas graph={graph} /* ... */ />;
     }
     ```
   - **Method B: `onEventName` Props:** Use dedicated props on **`<GraphCanvas>`** for common, predefined events.
     - **Requires:** Passing the `graph` instance to `<GraphCanvas>`.
     - **Pros:** Declarative, simple for common cases.
     - **Cons:** Limited to the specific events exposed as props.
     ```jsx
     import { GraphCanvas } from '@gravity-ui/graph';

     // ... assume graph instance is available

     <GraphCanvas
       graph={graph}
       onBlockSelectionChange={(event: CustomEvent<SelectionEvent<TBlockId>>) => {
         console.log('React Prop: Blocks selected:', event.detail.list);
       }}
       // ... other props
     />
     ```

### General Best Practices
- **Prioritize `useGraphEvent`:** In React, prefer the hook for its robustness and lifecycle management.
- **Always Unsubscribe (Core API):** If using `graph.on` directly (outside React hooks), ensure cleanup with `graph.off()`.
- **Use `event.detail`:** Access event-specific data here.
- **Check `event.detail.target`:** Identify the specific component involved.
- **Emit Custom Events:** Use `graph.emit(...)` to broadcast custom global events.
- **Performance:** Avoid heavy logic in listeners.

## Connection Creation Events (`ConnectionLayer.ts`)
These events are fired by the `ConnectionLayer` during the interactive creation of connections.

- **`connection-create-start`**: Fires when the user starts dragging a connection from a block or anchor.
  - **`event.detail`**: `{ blockId: TBlockId; anchorId: string | undefined; }`
  - **Preventable:** Yes. Preventing this stops the connection creation process.

- **`connection-create-hover`**: Fires when the dragged connection endpoint hovers over a potential target block or anchor.
  - **`event.detail`**: `{ sourceBlockId: TBlockId; sourceAnchorId: string | undefined; targetBlockId: TBlockId | undefined; targetAnchorId: string | undefined; }`
  - **Preventable:** Yes. Preventing this prevents the connection from being made to the current target (hover state might not show).

- **`connection-created`**: Fires when a connection is successfully created (user drops the endpoint onto a valid target).
  - **`event.detail`**: `{ sourceBlockId: TBlockId; sourceAnchorId?: string; targetBlockId: TBlockId; targetAnchorId?: string; }`
  - **Preventable:** Yes. Preventing this stops the connection from being added to the `connectionsList` store (default action).

- **`connection-create-drop`**: Fires when the user drops the connection endpoint, regardless of whether it landed on a valid target.
  - **`event.detail`**: `{ sourceBlockId: TBlockId; sourceAnchorId: string | undefined; targetBlockId?: TBlockId; targetAnchorId?: string; point: Point; }` (target details are present if dropped on a valid target).
  - **Preventable:** No (typically used for cleanup or alternative actions on drop).

------- 