/**
 * Port System - –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è @gravity-ui/graph
 *
 * üéØ –ú–û–¢–ò–í–ê–¶–ò–Ø:
 *
 * –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ä—Ç–æ–≤ —Ä–µ—à–∞–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–æ–≤ -
 * –∂–µ—Å—Ç–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
 *
 * –ü–†–û–ë–õ–ï–ú–ê –°–¢–ê–†–û–ô –°–ò–°–¢–ï–ú–´:
 * - –°–≤—è–∑–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –∏ —è–∫–æ—Ä–µ–π
 * - –°—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è: –±–ª–æ–∫–∏ ‚Üí —è–∫–æ—Ä—è ‚Üí —Å–≤—è–∑–∏
 * - Race conditions –∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 *
 * –†–ï–®–ï–ù–ò–ï –ß–ï–†–ï–ó –ü–û–†–¢–´:
 * - –ü–æ—Ä—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ (lazy creation)
 * - –°–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤
 * - –ü–æ—Ä—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
 * - –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∂–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 *
 * –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
 * - –ì–∏–±–∫–æ—Å—Ç—å: —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
 * - –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: –Ω–µ—Ç race conditions
 * - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–æ—Ä—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã
 * - –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å: –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */

import { signal } from "@preact/signals-core";

import { Component } from "../../../lib";

export const IS_PORT_TYPE = "Port" as const;

/** Unique identifier for a port */
export type TPortId = string | number | symbol;

/**
 * Port data structure
 * Represents a connection point that can be attached to blocks, anchors, or custom components
 */
export type TPort = {
  /** Unique identifier for the port */
  id: TPortId;
  /** X coordinate of the port */
  x: number;
  /** Y coordinate of the port */
  y: number;
  /** Component that owns this port (block, anchor, etc.) */
  component?: Component;
  /** Whether the port is waiting for position data from its component */
  lookup?: boolean;
};

/**
 * PortState - Reactive state container for a connection port
 *
 * Manages the lifecycle and state of a port, including position updates,
 * component ownership, and listener management for connections that use this port.
 *
 * ## Key Concepts:
 *
 * ### Lazy Creation
 * Ports are created on-demand when connections need them, even if the target
 * component doesn't exist yet. This solves initialization order problems.
 *
 * ### Lookup State
 * When `lookup: true`, the port is waiting for its component to provide coordinates.
 * When `lookup: false`, the port has valid coordinates and can be used for rendering.
 *
 * ### Listener Management
 * Tracks which components are listening to this port's changes. When no listeners
 * remain and no component owns the port, it can be safely garbage collected.
 */
export class PortState {
  /** Reactive signal containing the port's current state */
  public $state = signal<TPort>(undefined);

  /**
   * Set of components listening to this port's changes
   *
   * Since ports are created lazily, it is important to understand when a port
   * should be removed - when it has no parent component and no listeners.
   * This is its main purpose. Additionally, the list of listeners allows
   * obtaining a list of elements that are observing this port, which can be
   * useful for the UI.
   */
  public listeners = new Set<Component>();

  /**
   * Get the port's unique identifier
   *
   * @returns {TPortId} The port's ID
   */
  public get id(): TPortId {
    return this.$state.value.id;
  }

  /**
   * Get the port's X coordinate
   *
   * @returns {number} The X coordinate
   */
  public get x(): number {
    return this.$state.value.x;
  }

  /**
   * Get the port's Y coordinate
   *
   * @returns {number} The Y coordinate
   */
  public get y(): number {
    return this.$state.value.y;
  }

  /**
   * Get the component that owns this port
   *
   * @returns {Component | undefined} The owning component, if any
   */
  public get component(): Component | undefined {
    return this.$state.value.component;
  }

  /**
   * Get whether the port is in lookup state (waiting for coordinates)
   *
   * @returns {boolean | undefined} True if waiting for coordinates, false if resolved
   */
  public get lookup(): boolean | undefined {
    return this.$state.value.lookup;
  }

  constructor(port: TPort) {
    this.$state.value = { ...port };
  }

  /**
   * Register a component as a listener to this port's changes
   * @param component Component that wants to receive updates when this port changes
   */
  public listen(component: Component): void {
    this.listeners.add(component);
  }

  /**
   * Unregister a component from listening to this port's changes
   * @param component Component to stop receiving updates
   */
  public unlisten(component: Component): void {
    this.listeners.delete(component);
  }

  /**
   * Update the port's position coordinates
   * @param x New X coordinate
   * @param y New Y coordinate
   */
  public setPoint(x: number, y: number): void {
    this.updatePort({ x, y });
  }

  /**
   * Set the component that owns this port and mark it as resolved
   * @param component The component (block, anchor, etc.) that owns this port
   */
  public setComponent(component: Component): void {
    this.updatePort({ component, lookup: !component });
  }

  /**
   * Update port state with partial data
   * @param port Partial port data to merge with current state
   */
  public updatePort(port: Partial<TPort>): void {
    this.$state.value = { ...this.$state.value, ...port };
  }
}
