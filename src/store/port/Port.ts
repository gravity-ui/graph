/**
 * Port System - –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è @gravity-ui/graph
 *
 * üéØ –ú–û–¢–ò–í–ê–¶–ò–Ø:
 *
 * –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ä—Ç–æ–≤ —Ä–µ—à–∞–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–æ–≤ -
 * –∂–µ—Å—Ç–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
 *
 * –ü–†–û–ë–õ–ï–ú–ê –°–¢–ê–†–û–ô –°–ò–°–¢–ï–ú–´:
 * - –°–≤—è–∑–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –∏ —è–∫–æ—Ä–µ–π
 * - –°—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è: –±–ª–æ–∫–∏ ‚Üí —è–∫–æ—Ä—è ‚Üí —Å–≤—è–∑–∏
 * - Race conditions –∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 *
 * –†–ï–®–ï–ù–ò–ï –ß–ï–†–ï–ó –ü–û–†–¢–´:
 * - –ü–æ—Ä—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ (lazy creation)
 * - –°–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤
 * - –ü–æ—Ä—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
 * - –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∂–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 *
 * –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
 * - –ì–∏–±–∫–æ—Å—Ç—å: —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
 * - –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: –Ω–µ—Ç race conditions
 * - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–æ—Ä—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã
 * - –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å: –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */

import { signal } from "@preact/signals-core";

import { GraphComponent } from "../../components/canvas/GraphComponent";

export const IS_PORT_TYPE = "Port" as const;

export type TPortId = string | number | symbol;

export type TPort = {
  id: TPortId;
  x: number;
  y: number;
  component?: GraphComponent;
  lookup?: boolean;
};

export class PortState {
  public $state = signal<TPort>(undefined);

  public listeners = new Set<GraphComponent>();

  public get id() {
    return this.$state.value.id;
  }

  public get x() {
    return this.$state.value.x;
  }

  public get y() {
    return this.$state.value.y;
  }

  public get component() {
    return this.$state.value.component;
  }

  public get lookup() {
    return this.$state.value.lookup;
  }

  public get position() {
    return { x: this.$state.value.x, y: this.$state.value.y };
  }

  constructor(port: TPort) {
    this.$state.value = { ...port };
  }
  public own(component: GraphComponent): void {
    this.listeners.add(component);
  }

  public unown(component: GraphComponent): void {
    this.listeners.delete(component);
  }

  public setPoint(x: number, y: number): void {
    this.$state.value = { ...this.$state.value, x, y, lookup: false };
  }

  public setComponent(component: GraphComponent): void {
    this.$state.value = { ...this.$state.value, component, lookup: Boolean(component) };
  }

  public setLookup(lookup: boolean): void {
    this.$state.value = { ...this.$state.value, lookup };
  }

  public asTPort(): TPort {
    return { ...this.$state.value };
  }

  public updatePort(port: Partial<TPort>): void {
    this.$state.value = { ...this.$state.value, ...port };
  }
}
