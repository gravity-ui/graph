import React, { useLayoutEffect, useMemo, useState } from "react";

import { Button, Flex, Text, ThemeProvider } from "@gravity-ui/uikit";
import type { Meta, StoryFn } from "@storybook/react";

import { GraphAnimationAdvanced } from "../../../services/animation";

import "@gravity-ui/uikit/styles/styles.css";

import { globalScheduler } from "../../../lib";

const meta: Meta = {
  title: "Examples/Animation/Advanced Animation",
  parameters: {
    layout: "fullscreen",
  },
};

export default meta;

// –¢–∏–ø—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤
interface CircleParams {
  x: number;
  y: number;
  radius: number;
  color: { r: number; g: number; b: number };
}

interface RenderParams {
  x: number;
  y: number;
  size: number;
  colorR: number;
  colorG: number;
  colorB: number;
}

globalScheduler.start();

export const AdvancedAnimationExample: StoryFn = () => {
  const [circleStyle, setCircleStyle] = useState<React.CSSProperties>({
    position: "absolute",
    left: 50,
    top: 50,
    width: 60,
    height: 60,
    borderRadius: "50%",
    backgroundColor: "rgb(100, 149, 237)",
    border: "3px solid rgb(70, 130, 180)",
    transition: "none",
  });

  const [log, setLog] = useState<string[]>([]);

  const addToLog = (message: string) => {
    setLog((prev) => [
      ...prev.slice(-4), // Keep only last 4 messages
      `${new Date().toLocaleTimeString()}: ${message}`,
    ]);
  };

  const advancedAnimation = useMemo(() => {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    return new GraphAnimationAdvanced<CircleParams, RenderParams>(
      (renderParams: RenderParams) => {
        const backgroundColor = `rgb(${renderParams.colorR}, ${renderParams.colorG}, ${renderParams.colorB})`;
        const borderColor = `rgb(${Math.round(renderParams.colorR * 0.7)}, ${Math.round(renderParams.colorG * 0.7)}, ${Math.round(renderParams.colorB * 0.7)})`;

        setCircleStyle({
          position: "absolute",
          left: renderParams.x,
          top: renderParams.y,
          width: renderParams.size,
          height: renderParams.size,
          borderRadius: "50%",
          backgroundColor,
          border: `3px solid ${borderColor}`,
          transition: "none",
        });
      },
      {
        timing: "ease-in-out",
        duration: 2000,
        infinite: true,

        // –•—É–∫ init - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        init: (startParams: CircleParams) => {
          addToLog(`üöÄ Init: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ x=${startParams.x}, y=${startParams.y}`);
          // –ú–æ–∂–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
          return {
            ...startParams,
            radius: Math.max(startParams.radius, 30), // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
          };
        },

        // –•—É–∫ progress - –∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        progress: ({ progress, params }) => {
          const currentRadius = params.radius;
          const currentColor = params.color;

          // –°–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç
          const pulseEffect = 1 + Math.sin(progress * Math.PI * 4) * 0.1;
          const finalSize = currentRadius * 2 * pulseEffect;

          // –ê–Ω–∏–º–∏—Ä—É–µ–º —Ü–≤–µ—Ç
          const animatedColor = {
            r: Math.round(currentColor.r + Math.sin(progress * Math.PI * 2) * 50),
            g: Math.round(currentColor.g + Math.cos(progress * Math.PI * 2) * 50),
            b: Math.round(currentColor.b + Math.sin(progress * Math.PI * 3) * 50),
          };

          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
          const clampedColor = {
            r: Math.max(0, Math.min(255, animatedColor.r)),
            g: Math.max(0, Math.min(255, animatedColor.g)),
            b: Math.max(0, Math.min(255, animatedColor.b)),
          };

          addToLog(`üèÅ progress:  progress=${progress.toFixed(2)}, ${JSON.stringify(params)}`);

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AnimationParameters
          return {
            x: params.x,
            y: params.y,
            size: finalSize,
            colorR: clampedColor.r,
            colorG: clampedColor.g,
            colorB: clampedColor.b,
          };
        },

        // –•—É–∫ end - –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞
        end: ({ currentTime, startTime, progress, infinite }) => {
          const duration = currentTime - startTime;
          addToLog(
            `üèÅ End: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration.toFixed(0)}–º—Å, progress=${progress.toFixed(2)}, infinite=${infinite}`
          );
        },
      }
    );
  }, []);

  useLayoutEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    advancedAnimation.setCurrentParams({
      x: 50,
      y: 50,
      radius: 30,
      color: { r: 100, g: 149, b: 237 },
    });

    advancedAnimation.start({
      x: 400,
      y: 200,
      radius: 50,
      color: { r: 237, g: 100, b: 149 },
    });

    return () => {
      advancedAnimation.stop();
    };
  }, [advancedAnimation]);

  const restartAnimation = () => {
    setLog([]);
    console.log("restartAnimation");
    advancedAnimation.stop();
    advancedAnimation.setCurrentParams({
      x: 50,
      y: 50,
      radius: 30,
      color: { r: 100, g: 149, b: 237 },
    });
    advancedAnimation.start({
      x: 400,
      y: 200,
      radius: 50,
      color: { r: 237, g: 100, b: 149 },
    });
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // window.location.reload();
  };

  return (
    <ThemeProvider theme="light">
      <div style={{ width: "100%", height: "100vh", position: "relative", background: "#f8f9fa" }}>
        {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä—É–≥ */}
        <div style={circleStyle} />

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div
          style={{
            position: "absolute",
            top: 320,
            left: 50,
            background: "white",
            border: "1px solid #ddd",
            borderRadius: "12px",
            padding: "24px",
            minWidth: "600px",
            maxWidth: "800px",
            boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
          }}
        >
          <Text variant="header-2" style={{ marginBottom: "16px" }}>
            GraphAnimationAdvanced —Å –¥–∂–µ–Ω–µ—Ä–∏–∫–∞–º–∏ –∏ —Ö—É–∫–∞–º–∏
          </Text>

          <div style={{ marginBottom: "16px" }}>
            <Text variant="body-1" style={{ marginBottom: "8px", fontWeight: "bold" }}>
              –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
            </Text>
            <Text variant="caption-1" style={{ color: "#666" }}>
              ‚Ä¢ <strong>–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> <code>CircleParams</code> ‚Üí <code>RenderParams</code>
              <br />‚Ä¢ <strong>init hook:</strong> –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
              <br />‚Ä¢ <strong>progress hook:</strong> –ö–∞—Å—Ç–æ–º–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π –∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
              <br />‚Ä¢ <strong>end hook:</strong> –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
              <br />‚Ä¢ <strong>infinite: true:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª—ã —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ
            </Text>
          </div>

          <div style={{ marginBottom: "16px" }}>
            <Text variant="body-1" style={{ marginBottom: "8px", fontWeight: "bold" }}>
              –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π:
            </Text>
            <div
              style={{
                background: "#f5f5f5",
                border: "1px solid #ddd",
                borderRadius: "6px",
                padding: "12px",
                minHeight: "100px",
                fontFamily: "monospace",
                fontSize: "12px",
                maxHeight: "120px",
                overflowY: "auto",
              }}
            >
              {log.length === 0 ? (
                <Text variant="caption-1" style={{ color: "#999" }}>
                  –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∞–Ω–∏–º–∞—Ü–∏–∏...
                </Text>
              ) : (
                log.map((entry, index) => (
                  <div key={index} style={{ marginBottom: "4px" }}>
                    {entry}
                  </div>
                ))
              )}
            </div>
          </div>

          <Flex gap={2}>
            <Button size="m" view="action" onClick={restartAnimation}>
              üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
            </Button>
          </Flex>

          <div style={{ marginTop: "16px" }}>
            <Text variant="caption-1" style={{ color: "#666" }}>
              <strong>–ö–æ–¥:</strong>
              <br />
              <code>
                new GraphAnimationAdvanced&lt;CircleParams, RenderParams&gt;(callback, &#123; init, progress, end
                &#125;)
              </code>
            </Text>
          </div>
        </div>
      </div>
    </ThemeProvider>
  );
};
